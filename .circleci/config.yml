version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  ruby: circleci/ruby@1.2.0
  node: circleci/node@4.7.0
  cloudfoundry: circleci/cloudfoundry@1.0
  slack: circleci/slack@4.3.0
  queue: eddiewebb/queue@1.6.4
  gh: circleci/github-cli@1.0

commands:
  cf_install:
    parameters:
      space:
        type: string
    steps:
      - run:
          name: "Setup CF CLI"
          command: |
            curl -L -o cf.deb --retry 3 'https://packages.cloudfoundry.org/stable?release=debian64&version=7.4.0&source=github-rel'
            file cf.deb
            sudo dpkg -i cf.deb
            cf -v
            cf api "$CF_ENDPOINT"
            cf auth "$CF_USER" "$CF_PASSWORD"
            cf add-plugin-repo CF-Community https://plugins.cloudfoundry.org
            cf install-plugin app-autoscaler-plugin -r CF-Community -f
            cf target -o "$CF_ORG" -s "<< parameters.space >>"

  deploy:
    parameters:
      docker_image_tag:
        type: string
      space:
        type: string
      environment_key:
        type: string
    steps:
      - checkout
      - cf_install:
          space: << parameters.space >>
      - run:
          name: "Fetch existing manifest"
          command: |
            cf create-app-manifest "$CF_APP-<< parameters.environment_key >>" -p deploy_manifest.yml
      - run:
          name: "Push new app in dark mode"
          command: |
            export DOCKER_IMAGE=tariff-admin
            export DOCKER_TAG="<< parameters.docker_image_tag >>"

            # Push as "dark" instance
            CF_DOCKER_PASSWORD=$AWS_SECRET_ACCESS_KEY cf push "$CF_APP-<< parameters.environment_key >>-dark" -f deploy_manifest.yml --no-route --docker-image "$ECR_REPO/$DOCKER_IMAGE:$DOCKER_TAG" --docker-username "$AWS_ACCESS_KEY_ID"
            # Map dark route
            cf map-route  "$CF_APP-<< parameters.environment_key >>-dark" london.cloudapps.digital -n "$CF_APP-<< parameters.environment_key >>-dark"
            # Enable routing from this service to the backend applications which are private
            cf add-network-policy "$CF_APP-<< parameters.environment_key >>-dark" "$CF_BACKEND_APP_XI-<< parameters.environment_key >>" --protocol tcp --port 8080
            cf add-network-policy "$CF_APP-<< parameters.environment_key >>-dark" "$CF_BACKEND_APP_UK-<< parameters.environment_key >>" --protocol tcp --port 8080
      - run:
          name: "Verify new version is working on dark URL."
          command: |
            sleep 15
            # TODO: Retry
            # Verify new version is working on dark URL.
            HTTPCODE=`curl -s -o /dev/null -w "%{http_code}" https://$CF_APP-<< parameters.environment_key >>-dark.london.cloudapps.digital/healthcheck`

            if [ "$HTTPCODE" -ne 200 ];then
              echo "dark route not available, failing deploy ($HTTPCODE)"
              cf logs "$CF_APP-<< parameters.environment_key >>-dark" --recent
              cf delete -f  "$CF_APP-<< parameters.environment_key >>-dark"
              exit 1
            fi
      - run:
          name: "Switch dark app to live"
          command: |
            # Send "real" url to new version
            cf unmap-route "$CF_APP-<< parameters.environment_key >>-dark" london.cloudapps.digital -n "$CF_APP-<< parameters.environment_key >>-dark"

            # Start sending traffic to new version
            cf map-route  "$CF_APP-<< parameters.environment_key >>-dark" london.cloudapps.digital -n "$CF_APP-<< parameters.environment_key >>"

            # Stop sending traffic to previous version
            cf unmap-route  "$CF_APP-<< parameters.environment_key >>" london.cloudapps.digital -n "$CF_APP-<< parameters.environment_key >>"

            # stop previous version
            cf stop "$CF_APP-<< parameters.environment_key >>"

            # delete previous version
            cf delete "$CF_APP-<< parameters.environment_key >>" -f

            # Switch name of "dark" version to claim correct name
            cf rename "$CF_APP-<< parameters.environment_key >>-dark" "$CF_APP-<< parameters.environment_key >>"
      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: deployments
          event: pass
          template: basic_success_1

  sentry-release:
    steps:
      - checkout
      - run:
          name: Create release and notify Sentry of deploy
          command: |
            curl -sL https://sentry.io/get-cli/ | bash
            export SENTRY_RELEASE=$(sentry-cli releases propose-version)
            sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
            sentry-cli releases set-commits $SENTRY_RELEASE --auto
            sentry-cli releases finalize $SENTRY_RELEASE
            sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT

jobs:
  build:
    environment:
      IMAGE_NAME: tariff-admin
    parameters:
      dev-build:
        default: false
        type: boolean
    docker:
      - image: cimg/ruby:3.0.3-node
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.2
          docker_layer_caching: false
      - aws-cli/install
      - run:
          name: "Set docker tag"
          command: |
            echo "export DOCKER_TAG=<<# parameters.dev-build >>dev-<</ parameters.dev-build >>${CIRCLE_SHA1}" >> $BASH_ENV
      - run:
          name: "Build Docker image"
          command: |
            export GIT_NEW_REVISION=$(git rev-parse --short HEAD)
            echo $GIT_NEW_REVISION >REVISION
            docker build -t $IMAGE_NAME:$DOCKER_TAG .
      - run:
          name: "Push image to ECR"
          command: |
            aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin $ECR_REPO
            docker tag $IMAGE_NAME:$DOCKER_TAG $ECR_REPO/$IMAGE_NAME:$DOCKER_TAG
            docker push $ECR_REPO/$IMAGE_NAME:$DOCKER_TAG
  linters:
    docker:
      - image: 'cimg/ruby:3.0.3-node'
    steps:
      - checkout
      - ruby/install-deps
      - ruby/rubocop-check:
          format: progress
          label: Inspecting with Rubocop
      - run:
          name: Inspecting with Brakeman
          when: always
          command: 'bundle exec brakeman -o test-results/brakeman/brakeman.junit -o brakeman.html --no-progress --separate-models'
      - store_test_results:
          path: test-results/brakeman/
      - store_artifacts:
          path: brakeman.html
  test:
    docker:
      - image: cimg/ruby:3.0.3-node
        environment:
          BUNDLE_JOBS: "3"
          BUNDLE_RETRY: "3"
          RAILS_ENV: test
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/tariff_test"
      - image: circleci/postgres:10-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: tariff_test
          POSTGRES_PASSWORD: postgres
      - image: circleci/redis:4.0.9
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
      - run:
          name: "Setup DB"
          command: |
            RAILS_ENV=test bundle exec rails db:migrate --trace
      - ruby/rspec-test
      - store_artifacts:
          path: coverage

  deploy_development:
    docker:
      - image: cimg/ruby:3.0.3
    environment:
      SENTRY_ENVIRONMENT: "development"
    steps:
      - queue/until_front_of_line:
          time: '10'
          consider-branch: false
          dont-quit: true
      - deploy:
          docker_image_tag: dev-$CIRCLE_SHA1
          space: "development"
          environment_key: "dev"
      - sentry-release

  deploy_staging:
    docker:
      - image: cimg/ruby:3.0.3-node
    environment:
      SENTRY_ENVIRONMENT: "staging"
    steps:
      - queue/until_front_of_line:
          time: '10'
          consider-branch: true
          dont-quit: true
      - deploy:
          docker_image_tag: $CIRCLE_SHA1
          space: "staging"
          environment_key: "staging"
      - sentry-release

  deploy_production:
    docker:
      - image: cimg/ruby:3.0.3-node
    environment:
      SENTRY_ENVIRONMENT: "production"
    steps:
      - deploy:
          docker_image_tag: $CIRCLE_TAG
          space: "production"
          environment_key: "production"
      - sentry-release

  create_production_release:
    docker:
      - image: cimg/ruby:3.0.3-node
    environment:
      IMAGE_NAME: tariff-admin
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.2
          docker_layer_caching: false
      - aws-cli/install
      - run:
          name: Generate release notes
          command: |
            mkdir release-details

            NEW_RELEASE=$(date +"%Y%m%d-%H%M")
            echo "${NEW_RELEASE}" > release-details/name.txt
            echo "export NEW_RELEASE='${NEW_RELEASE}'" >> $BASH_ENV

            LAST_RELEASE=$(git tag --list 'release-202*-*' | sort | tail -n 1)
            if [[ -z "${LAST_RELEASE}" ]]; then
              echo "First release" > release-details/notes.txt
            else
              git log --merges --format=format:"* %b" $LAST_RELEASE..HEAD > release-details/notes.txt

              if [[ ! -s release-details/notes.txt ]]; then
                echo "No merged changes - possible re-release" > release-details/notes.txt
              fi
            fi
      - run:
          command: cat release-details/notes.txt
      - run:
          name: Tag Docker Image as production release
          command: |
            aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin $ECR_REPO
            docker pull "${ECR_REPO}/${IMAGE_NAME}:${CIRCLE_SHA1}"
            docker tag "${ECR_REPO}/${IMAGE_NAME}:${CIRCLE_SHA1}" "${ECR_REPO}/${IMAGE_NAME}:release-${NEW_RELEASE}"
            docker push "${ECR_REPO}/${IMAGE_NAME}:release-${NEW_RELEASE}"
      - gh/setup
      - run:
          name: Create GitHub release
          command: |
            gh release create release-$NEW_RELEASE \
              --notes-file release-details/notes.txt \
              --title "Release $NEW_RELEASE" \
              --target "${CIRCLE_SHA1}"

  notify_production_release:
    docker:
      - image: cimg/ruby:3.0.3-node
    steps:
      - run:
          name: Read release name
          command: |
            RELEASE_NAME=$(echo "${CIRCLE_TAG}" | sed 's/^release-//')
            echo "export RELEASE_NAME='${RELEASE_NAME}'" >> $BASH_ENV
      - run:
          name: Fetch release notes
          command: |
            REPO_API_URL=$(echo "${CIRCLE_REPOSITORY_URL}/" | sed 's|.git/$||' | sed 's|git@github.com:|https://api.github.com/repos/|')
            curl --silent --show-error "${REPO_API_URL}/releases/tags/${CIRCLE_TAG}" | jq -r .body > release-notes.txt
      - run:
          name: Clean up notes
          command: |
            cat release-notes.txt | jq -aRsr . > cleaned-release-notes.txt
            sed -i 's/\"//g' cleaned-release-notes.txt
            sed -i "s/\'//g" cleaned-release-notes.txt
            sed -i 's/"//g' cleaned-release-notes.txt
            sed -i "s/'//g" cleaned-release-notes.txt
            echo 'export RELEASE_NOTES="$(< cleaned-release-notes.txt)"' >> $BASH_ENV
      - slack/notify:
          channel: trade_tariff
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "New release ${RELEASE_NAME} for Admin :tada:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${RELEASE_NOTES}"
                  }
                }
              ]
            }

workflows:
  version: 2
  build_and_test:
    jobs:
      - build:
          name: build_dev
          context: trade-tariff
          dev-build: true
          filters:
            branches:
              ignore:
                - main
                - /^dependabot\/.*/
      - linters:
          context: trade-tariff
      - test:
          context: trade-tariff
          filters:
            branches:
              ignore:
                - main
      - deploy_development:
          context: trade-tariff
          filters:
            branches:
              ignore:
                - main
                - /^dependabot\/.*/
          requires:
            - build_dev
            - test
      - build:
          name: build_live
          context: trade-tariff
          filters:
            branches:
              only:
                - main
      - deploy_staging:
          context: trade-tariff
          filters:
            branches:
              only:
                - main
          requires:
            - build_live
      - hold_production:
          type: approval
          filters:
            branches:
              only:
                - main
          requires:
            - deploy_staging
      - create_production_release:
          context: trade-tariff
          filters:
            branches:
              only:
                - main
          requires:
            - hold_production
      - deploy_production:
          context: trade-tariff
          filters:
            tags:
              only: /^release-202[\d-]+/
            branches:
              ignore: /.*/
      - notify_production_release:
          context: trade-tariff
          filters:
            tags:
              only: /^release-202[\d-]+/
            branches:
              ignore: /.*/
          requires:
            - deploy_production
